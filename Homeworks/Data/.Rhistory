ls
clear
q()
run
qt(0.025,89)
qt(0.025,9)
+/-
q()
run
clearPushBack()
clear
cq()
q()
std_resid <- (resid - mean(resids)) / sd(resids)
par(mfrow = c(1,1))
fit <- lm(salary ~ ., data = df[, c("salary", model_vars)])
resid <- fit$residuals
std_resid <- (resid - mean(resids)) / sd(resids)
getwd()
setwd("/Users/samuel/Desktop/stats/212/Homeworks/Data")
install.packages("leaps")
require(leaps)
library(leaps)
df <- read.csv("Baseball-Salary-Data.csv")
head(df)
m1 <- lm(salary ~ . - player, data = df)
summary(m1)
par(mfrow = c(2,2))
plot(m1)
m2 <- lm(salary ~ . - player - batting.average - on.base.percent - hits - doubles - triples, data = df)
summary(m2)
sse_f <- mean(m1$residual2^2)
sse_r <- mean(m2$residuals^2)
df1 <- 5
source("AIC-leaps.R")
df <- read.csv("Baseball-Salary-Data.csv")
df <- df[, 18]
leaps_ic <- leaps.AIC(df[, 2:17], df[, 1])
par(mfrow= c(1,1))
par(mar = c(3,3,3,3))
cd <- cooks.distance(fits)
plot(cd, ylab = "Cook's D")
fit <- lm(salary ~ ., data = df[, c("salary", model_vars)])
resid <- fit$residuals
df <- read.csv("Baseball-Salary-Data.csv")
head(df)
m1 <- lm(salary ~ . - player, data = df)
summary(m1)
par(mfrow = c(2,2))
plot(m1)
m2 <- lm(salary ~ . - player - batting.average - on.base.percent - hits - doubles - triples, data = df)
summary(m2)
sse_f <- mean(m1$residual2^2)
sse_r <- mean(m2$residuals^2)
df1 <- 5
source("AIC-leaps.R")
df <- read.csv("Baseball-Salary-Data.csv")
df <- df[, 18]
leaps_ic <- leaps.AIC(df[, 2:17], df[, 1])
leaps_output <- leaps(df[, 2:17], y = df[, 1], nbest = 1)
source("AIC-leaps.R")
df <- read.csv("Baseball-Salary-Data.csv")
df <- df[, 18]
leaps_ic <- leaps.AIC(df[, 2:17], df[, 1])
leaps_output <- leaps(df[, 2:17], y = df[, 1], nbest = 1)
#c
#To test variance
anova(aov(resid(aov(values ~ ind))**2 ~ ind))
#b
dta2 <- read.table("SleepRem.txt", header = TRUE, sep = "")
attach(dta2)
fit <- aov(values ~ as.factor(ind), data = dta2)
anova(fit)
#c
#To test variance
anova(aov(resid(aov(values ~ ind))**2 ~ ind))
#to test stability
shapiro.test(resid(aov(values ~ ind)))
m1 <- lm(salary ~ . - player, data = df)
getwd()
setwd("/Users/samuel/Desktop/stats/212/Homeworks/Data")
install.packages("leaps")
require(leaps)
library(leaps)
df <- read.csv("Baseball-Salary-Data.csv")
head(df)
m1 <- lm(salary ~ . - player, data = df)
summary(m1)
par(mfrow = c(2,2))
plot(m1)
m1 <- lm(salary ~ . - player, data = df)
summary(m1)
par(mfrow = c(2,2))
plot(m1)
df <- read.csv("Baseball-Salary-Data.csv")
head(df)
m1 <- lm(salary ~ . - player, data = df)
summary(m1)
par(mfrow = c(2,2))
plot(m1)
m2 <- lm(salary ~ . - player - batting.average - on.base.percent - hits - doubles - triples, data = df)
summary(m2)
par(mfrow = c(1, 3))
m2_summ <- summary(m2)
resids <- m2$residuals
plot(m2$fitted.values, resids, xlab = "Predicted", ylab = "Residuals", main = "(i)")
plot(density(resids), main = "(ii)")
std_resid <- (resids - mean(resids)) / sd(resids)
qqnorm(std_resid, main = "(iii)")
qqline(std_resid)
source("AIC-Leaps.R")
df <- read.csv("Baseball-Salary-Data.csv")
df <- df[, -18]
library(leaps)
leaps_ic <- leaps.AIC(df[,2:17], df[, 1])
leaps_output <- leaps(df[, 2:17], y = df[, 1], nbest = 1)
var_names <- colnames(df[, 2:17])
var_mask <- leaps_output$which[6, ]
model_vars <- var_names[var_mask]
model_vars <- var_names[var_mask]
model_vars
fits <- lm(salary ~ . , data = df[, c("salary", model_vars)])
resids <- fits$residuals
std_resid <- (resids - mean(resids)) / sd(resids)
par(mfrow = c(1,1))
plot(std_resid)
abline(h = c(-3,3), col = "blue")
extremes <- which(abs(std_resid) > 3)
extremes
df[extremes, ]
colMeans(df)
plot(fits$fitted.values, std_resid, xlab = "Predicted", ylab = "Residual")
qqnorm(std_resid)
qqline(std_resid)
par(mfrow = c(1, 1))
par(mar=c(3,3,3,3))
cd <- cooks.distance(fits)
plot(cd, ylab = "Cook's D")
#b
dta2 <- read.table("SleepRem.txt", header = TRUE, sep = "")
attach(dta2)
head(df)
summary(m1)
par(mfrow = c(2,2))
plot(m1)
plot(m1)
summary(m1)
summary(m2)
par(mfrow = c(1, 3))
m2_summ <- summary(m2)
resids <- m2$residuals
plot(m2$fitted.values, resids, xlab = "Predicted", ylab = "Residuals", main = "(i)")
plot(density(resids), main = "(ii)")
std_resid <- (resids - mean(resids)) / sd(resids)
par(mfrow = c(1, 3))
m2_summ <- summary(m2)
resids <- m2$residuals
plot(m2$fitted.values, resids, xlab = "Predicted", ylab = "Residuals", main = "(i)")
plot(density(resids), main = "(ii)")
std_resid <- (resids - mean(resids)) / sd(resids)
qqnorm(std_resid, main = "(iii)")
qqline(std_resid)
summary(m1)
plot(m1)
summary(m2)
SSE1 = mean(lm1$residuals^(2))
m2 <- lm(salary ~ . - player - batting.average - on.base.percent - hits - doubles - triples, data = df)
summary(m2)
#e
SSE1 = mean(m1$residuals^(2))
SSE2 = mean(m2$residuals^(2))
DF1 = 5
DF2 = nrow(Baseball) - 16 - 1
DF2 = nrow(df) - 16 - 1
FStat = ((SSE2-SSE1)/DF1)/(SSE1/DF2)
print(pValue)
pValue = pf(FStat, DF1, DF2, lower.tail = F)
print(pValue)
leaps_output <- leaps(df[, 2:17], y = df[, 1], nbest = 1)
model_vars
df <- read.csv("Baseball-Salary-Data.csv")
df <- df[, -18]
library(leaps)
leaps_ic <- leaps.AIC(df[,2:17], df[, 1])
leaps_output <- leaps(df[, 2:17], y = df[, 1], nbest = 1)
var_names <- colnames(df[, 2:17])
best_model_index <- which.min(leaps_output$Cp)
var_mask <- leaps_output$which[best_model_index, ]
model_vars <- var_names[var_mask]
model_vars <- var_names[var_mask]
model_vars <- var_names[var_mask]
model_vars
source("AIC-Leaps.R")
df <- read.csv("Baseball-Salary-Data.csv")
df <- df[, -18]
library(leaps)
leaps_ic <- leaps.AIC(df[,2:17], df[, 1])
leaps_output <- leaps(df[, 2:17], y = df[, 1], nbest = 1)
var_names <- colnames(df[, 2:17])
best_model_index <- which.min(leaps_output$Cp)
var_mask <- leaps_output$which[best_model_index, ]
model_vars <- var_names[var_mask]
model_vars <- var_names[var_mask]
model_vars <- var_names[var_mask]
model_vars
df <- read.csv("Baseball-Salary-Data.csv")
df <- df[, -18]
library(leaps)
leaps_ic <- leaps.AIC(df[,2:17], df[, 1])
leaps_output <- leaps(df[, 2:17], y = df[, 1], nbest = 1)
var_names <- colnames(df[, 2:17])
best_model_index <- which.min(leaps_output$Cp)
var_mask <- leaps_output$which[best_model_index, ]
model_vars <- var_names[var_mask]
model_vars <- var_names[var_mask]
model_vars <- var_names[var_mask]
model_vars
model_vars
# includes all predictors             incliudes the response variable
leaps_output <- leaps(df[, 2:17], y = df[, 1], nbest = 1)
var_names <- colnames(df[, 2:17]) # get predictors name
leaps_ic <- leaps.AIC(df[,2:17], df[, 1])
model_vars
plot(std_resid)
fits <- lm(salary ~ . , data = df[, c("salary", model_vars)])
resids <- fits$residuals
std_resid <- (resids - mean(resids)) / sd(resids)
par(mfrow = c(1,1))
plot(std_resid)
fits <- lm(salary ~ . , data = df[, c("salary", model_vars)])
resids <- fits$residuals
std_resid <- (resids - mean(resids)) / sd(resids)
par(mfrow = c(1,1))
plot(std_resid)
abline(h = c(-3,3), col = "blue")
std_residuals <- rstandard(model)
model <- lm(formula, data = df)
# i
formula <- as.formula(paste("salary ~", paste(model_vars, collapse = " + ")))
model <- lm(formula, data = df)
std_residuals <- rstandard(model)
abline(h = c(-3, 3), col = "red", lty = 2)  # Highlight potential outliers
std_residuals <- rstandard(model)
plot(1:length(std_residuals), std_residuals, xlab = "Index", ylab = "Standardized Residuals",
main = "Standardized Residuals vs. Index", pch = 19, col = "blue")
abline(h = c(-3, 3), col = "red", lty = 2)  # Highlight potential outliers
fits <- lm(salary ~ . , data = df[, c("salary", model_vars)])
resids <- fits$residuals
std_resid <- (resids - mean(resids)) / sd(resids)
par(mfrow = c(1,1))
plot(std_resid)
abline(h = c(-3,3), col = "blue")
extremes <- which(abs(std_resid) > 3)
extremes
df[extremes, ]
fits <- lm(salary ~ . , data = df[, c("salary", model_vars)])
resids <- fits$residuals
std_resid <- (resids - mean(resids)) / sd(resids)
par(mfrow = c(1,1))
plot(std_resid)
abline(h = c(-3,3), col = "blue")
extremes <- which(abs(std_resid) > 3)
extremes
df[extremes, ]
df[extremes, ]
extremes
extremes <- which(abs(std_resid) > 3)
extremes
plot(fits$fitted.values, std_resid, xlab = "Predicted", ylab = "Residual")
predicted_values <- fits(model)
predicted_values <- fits(model)
fits <- lm(salary ~ . , data = df[, c("salary", model_vars)])
resids <- fits$residuals
std_resid <- (resids - mean(resids)) / sd(resids)
par(mfrow = c(1,1))
plot(std_resid)
abline(h = c(-3,3), col = "blue")
extremes <- which(abs(std_resid) > 3)
extremes
df[extremes, ]
predicted_values <- fits(model)
predicted_values <- fits(model)
# j
predicted_values <- fitted(fits)
plot(predicted_values, std_residuals, xlab = "Predicted Salary", ylab = "Standardized Residuals",
main = "Standardized Residuals vs. Predicted Values", pch = 19, col = "blue")
abline(h = 0, col = "red", lty = 2)
plot(fits$fitted.values, std_resid, xlab = "Predicted", ylab = "Residual")
qqnorm(std_resid)
qqline(std_resid)
par(mfrow = c(1, 1))
par(mar=c(3,3,3,3))
cd <- cooks.distance(fits)
plot(cd, ylab = "Cook's D")
par(mfrow = c(1, 1))
par(mar=c(3,3,3,3))
cd <- cooks.distance(fits)
plot(cd, ylab = "Cook's D")
influential_points <- which(cd > (4 / length(cd)))
print(influential_points)
df[influential_points, ]
df[influential_points, ]
