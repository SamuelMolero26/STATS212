ls
clear
q()
run
qt(0.025,89)
qt(0.025,9)
+/-
q()
run
clearPushBack()
clear
cq()
q()
print(AICpoly(x,y,8))
getwd()
setwd("/Users/samuel/Desktop/stats/212/Homeworks/Data")
tree_age <- read.table("TreeAgeDiamSugarMaple.txt", header = T)
x <- tree_age$Diamet
y <- tree_age$Age
#function definition
AICpoly = function(x,y,kmax) {
adjr2 = 1:kmax
aic  = 1:kmax
bic =1:kmax
n=length(y)
for(k in 1:kmax){
fit = lm(y~poly(x,k, raw=T))
aic[k] = AIC(fit)
bic[k] = AIC(fit, k=log(n))
}
kr2 = (1:kmax)[adjr2==max(adjr2)]
kaic = (1:kmax)[aic == min(aic)]
kbic = (1:kmax)[bic == min(bic)]
ylim = range(c(aic, bic))
plot(1:k, aic, xlab ='k', ylab ='aic/bic',
ylim=ylim, col='red')
points(1:k, bic, col ='blue')
abline(v=kaic, col = 'red')
abline(v = kbic, col = 'blue')
tittle("Red points: AIC Blue Points: BIC")
list(aic,bic, adjr2, kaic, kbic, kr2)
return
}
print(AICpoly(x,y,8))
print(AICpoly(x,y,8))
source("~/Desktop/stats/212/Homeworks/HW2.R", echo=TRUE)
print(AICpoly(x,y,8))
source("~/Desktop/stats/212/Homeworks/HW2.R", echo=TRUE)
source("~/Desktop/stats/212/Homeworks/HW2.R", echo=TRUE)
source("~/Desktop/stats/212/Homeworks/HW2.R", echo=TRUE)
summary(AICpoly(x,y,8))
print(AICpoly(x,y,8))
print(AICpoly(x,y,8))
source("~/Desktop/stats/212/Homeworks/HW2.R", echo=TRUE)
print(AICpoly(x,y,8))
source("~/Desktop/stats/212/Homeworks/HW2.R", echo=TRUE)
print(results)
summary(tree_fit)
print(results)
summary(tree_fit)
#part B
tree_fit - lm(y~poly(x, degree = 2, raw = TRUE))
source("~/Desktop/stats/212/Homeworks/HW2.R", echo=TRUE)
source("~/Desktop/stats/212/Homeworks/HW2.R", echo=TRUE)
tree_fit <- lm(y~poly(x, degree = 2, raw = TRUE))
summary(tree_fit)
resid = tree_fit$residuals
fitted = tree_fit$fitted.values
plot(fitted, resid, xlab ="Fitted", ylab = "Residuals")
#part A
results= AICpoly(x,y,8)
print(results)
#part A
results= AICpoly(x,y,8)
#part A
AICpoly(x,y,8)
#part A
AICpoly(x,y,8)
print(results)
results=AICpoly(x,y,8)
print(results)
#function definition
AICpoly = function(x,y,kmax) {
adjr2 = 1:kmax
aic  = 1:kmax
bic =1:kmax
n=length(y)
for(k in 1:kmax){
fit = lm(y~poly(x,k, raw=T))
aic[k] = AIC(fit)
bic[k] = AIC(fit, k=log(n))
adjr2[k] = summary(fit)$adj
}
kr2 = (1:kmax)[adjr2==max(adjr2)]
kaic = (1:kmax)[aic == min(aic)]
kbic = (1:kmax)[bic == min(bic)]
ylim = range(c(aic, bic))
plot(1:k, aic, xlab ='k', ylab ='aic/bic',
ylim=ylim, col='red')
points(1:k, bic, col ='blue')
abline(v=kaic, col = 'red')
abline(v = kbic, col = 'blue')
title("Red points: AIC  | Blue Points: BIC")
list(aic,bic, adjr2, kaic, kbic, kr2)
return (list(AIC = aic, BIC = bic, Adjusted_R2 = adjr2, Best_AIC_k = kaic, Best_BIC_k = kbic, Best_Adjusted_R2_k = kr2))
}
#part A
results=AICpoly(x,y,8)
print(results)
#part B
tree_fit <- lm(y~poly(x, degree = 2, raw = TRUE))
summary(tree_fit)
function (object, contr, how.many, ...)
{
object <- as.factor(object)
if (!nlevels(object))
stop("object not interpretable as a factor")
if (!missing(contr) && is.name(Xcontr <- substitute(contr)))
contr <- switch(as.character(Xcontr), poly = "contr.poly",
helmert = "contr.helmert", sum = "contr.sum", treatment = "contr.treatment",
SAS = "contr.SAS", contr)
if (missing(contr)) {
oc <- getOption("contrasts")
contr <- if (length(oc) < 2L)
if (is.ordered(object))
contr.poly
else contr.treatment
else oc[1 + is.ordered(object)]
}
if (missing(how.many) && missing(...))
contrasts(object) <- contr
else {
if (is.character(contr))
contr <- get(contr, mode = "function")
if (is.function(contr))
contr <- contr(levels(object), ...)
contrasts(object, how.many) <- contr
}
object
}
function (object, contr, how.many, ...)
{
object <- as.factor(object)
if (!nlevels(object))
stop("object not interpretable as a factor")
if (!missing(contr) && is.name(Xcontr <- substitute(contr)))
contr <- switch(as.character(Xcontr), poly = "contr.poly",
helmert = "contr.helmert", sum = "contr.sum", treatment = "contr.treatment",
SAS = "contr.SAS", contr)
if (missing(contr)) {
oc <- getOption("contrasts")
contr <- if (length(oc) < 2L)
if (is.ordered(object))
contr.poly
else contr.treatment
else oc[1 + is.ordered(object)]
}
if (missing(how.many) && missing(...))
contrasts(object) <- contr
else {
if (is.character(contr))
contr <- get(contr, mode = "function")
if (is.function(contr))
contr <- contr(levels(object), ...)
contrasts(object, how.many) <- contr
}
object
}
source("~/Desktop/stats/212/Homeworks/HW2.R", echo=TRUE)
results=AICpoly(x,y,8)
print(results)
tree_fit <- lm(y~poly(x, degree = 2, raw = TRUE))
summary(tree_fit)
source("~/Desktop/stats/212/Homeworks/HW2.R", echo=TRUE)
results=AICpoly(x,y,8)
print(results)
tree_fit <- lm(y~poly(x, degree = 2, raw = TRUE))
summary(tree_fit)
source("~/Desktop/stats/212/Homeworks/HW2.R", echo=TRUE)
resid = tree_fit$residuals
fitted = tree_fit$fitted.values
plot(fitted, resid, xlab ="Fitted", ylab = "Residuals")
resid = tree_fit$residuals
fitted = tree_fit$fitted.values
plot(fitted, resid, xlab ="Fitted", ylab = "Residuals")
predict(tree_fit, newdata = newtree, interval = "predict", level =0.95)
resid = tree_fit$residuals
fitted = tree_fit$fitted.values
plot(fitted, resid, xlab ="Fitted", ylab = "Residuals")
resid = tree_fit$residuals
fitted = tree_fit$fitted.values
plot(fitted, resid, xlab ="Fitted", ylab = "Residuals")
plot(fitted, resid, xlab ="Fitted", ylab = "Residuals", main = "Residuals vs Perdicted values")
